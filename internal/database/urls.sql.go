// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: urls.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNewShortURL = `-- name: CreateNewShortURL :one
INSERT INTO urls (id, created_at, updated_at, user_id, short_url, plain_url) 
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, plain_url, short_url, user_id
`

type CreateNewShortURLParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ShortUrl  string
	PlainUrl  string
}

func (q *Queries) CreateNewShortURL(ctx context.Context, arg CreateNewShortURLParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createNewShortURL,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ShortUrl,
		arg.PlainUrl,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PlainUrl,
		&i.ShortUrl,
		&i.UserID,
	)
	return i, err
}

const getURLEntriesByUserID = `-- name: GetURLEntriesByUserID :many
SELECT id, created_at, updated_at, plain_url, short_url, user_id FROM urls WHERE user_id = $1
`

func (q *Queries) GetURLEntriesByUserID(ctx context.Context, userID uuid.UUID) ([]Url, error) {
	rows, err := q.db.QueryContext(ctx, getURLEntriesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PlainUrl,
			&i.ShortUrl,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getURLEntryByShortURL = `-- name: GetURLEntryByShortURL :one
SELECT id, created_at, updated_at, plain_url, short_url, user_id FROM urls WHERE short_url = $1
`

func (q *Queries) GetURLEntryByShortURL(ctx context.Context, shortUrl string) (Url, error) {
	row := q.db.QueryRowContext(ctx, getURLEntryByShortURL, shortUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PlainUrl,
		&i.ShortUrl,
		&i.UserID,
	)
	return i, err
}
